package randombytes

// #cgo pkg-config: libsodium
// #include <stdlib.h>
// #include <sodium.h>
import "C"
import "github.com/silkeh/libsodium-go/support"
import "unsafe"

// SeedBytes represents the number of bytes required
// for seeding RandomBytesBufDeterministic.
const SeedBytes = C.randombytes_SEEDBYTES

// BytesMax represents the maximum number of random bytes returned
const BytesMax = C.randombytes_BYTES_MAX

// Bytes returns a specified number of random bytes.
// It is essentially a wrapper around Read for convenience.
// Note that this behaviour is different than in NaCl and libsodium,
// where this function behaves the same as Read.
func Bytes(size int) []byte {
	buf := make([]byte, size)
	Read(buf)
	return buf
}

// Read fills a buffer with random bytes.
func Read(buf []byte) {
	support.CheckSizeMax(buf, BytesMax, "buffer")
	C.randombytes_buf(
		unsafe.Pointer(support.BytePointer(buf)),
		C.size_t(len(buf)))
}

// ReadDeterministic fills a buffer with bytes that are
// indistinguishable from random bytes without knowing seed.
func ReadDeterministic(buf, seed []byte) {
	support.CheckSizeMax(buf, BytesMax, "buffer")
	support.CheckSize(seed, SeedBytes, "seed")

	C.randombytes_buf_deterministic(
		unsafe.Pointer(support.BytePointer(buf)),
		C.size_t(len(buf)),
		(*C.uchar)(&seed[0]))
}

// Random returns a random 32 bit unsigned integer.
func Random() uint32 {
	return uint32(C.randombytes_random())
}

// Uniform returns a random number between 0 and an upper bound.
// The generated bytes have a uniform distribution between 0 and the upper bound.
func Uniform(upperBound uint32) uint32 {
	return uint32(C.randombytes_uniform(C.uint32_t(upperBound)))
}

// Stir reseeds the random number generator.
func Stir() {
	C.randombytes_stir()
}

// Close de-allocates the resources used by the random number generator.
func Close() {
	C.randombytes_close()
}

// SetImplementation sets the implementation of the random number generator.
func SetImplementation(impl Implementation) int {
	return int(C.randombytes_set_implementation(
		(*C.struct_randombytes_implementation)(impl)))
}

// ImplementationName returns the name of the random number
// generator that is being used.
func ImplementationName() string {
	return C.GoString(C.randombytes_implementation_name())
}

// Implementation represents a pointer to a randombytes implementation
type Implementation *C.struct_randombytes_implementation

// Salsa20Implementation returns the Salsa20 implementation.
func Salsa20Implementation() Implementation {
	return Implementation(&C.randombytes_salsa20_implementation)
}

// SysRandomImplementation returns the SysRandom implementation.
func SysRandomImplementation() Implementation {
	return Implementation(&C.randombytes_sysrandom_implementation)
}
